/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { UiDirectoryCollectionChangeEventData } from "./types";
export { UiDirectoryCollectionChangeEventData } from "./types";
export namespace Components {
    interface UiDirectoryCollection {
        /**
          * Horizontal alignment for scrolling into view.
          * @type {ScrollIntoViewOptions['inline']}
          * @default 'center'
         */
        "alignX": ScrollIntoViewOptions['inline'];
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "align-x"?: ScrollIntoViewOptions['inline'];
        /**
          * Vertical alignment for scrolling into view.
          * @type {ScrollIntoViewOptions['block']}
          * @default 'center'
         */
        "alignY": ScrollIntoViewOptions['block'];
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "align-y"?: ScrollIntoViewOptions['block'];
    }
    interface UiDirectorySegment {
        /**
          * Activates the segment by setting the `active` property to true.
          * @returns
         */
        "activate": () => Promise<void>;
        /**
          * Data to be used within the expansion panel.
          * @type {string | null}
          * @default null
         */
        "data": string | null;
        /**
          * Deactivates the segment by setting the `active` property to false.
          * @returns
         */
        "deactivate": () => Promise<void>;
        /**
          * Retrieves the parsed data associated with this segment.
          * @returns A promise that resolves to the parsed data or null
         */
        "getData": () => Promise<unknown | null>;
        /**
          * A unique identifier for the segment.
          * @type {string}
         */
        "mark": string;
    }
}
export interface UiDirectoryCollectionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiDirectoryCollectionElement;
}
declare global {
    interface HTMLUiDirectoryCollectionElementEventMap {
        "uiDirectoryCollectionSegmentChange": UiDirectoryCollectionChangeEventData;
    }
    interface HTMLUiDirectoryCollectionElement extends Components.UiDirectoryCollection, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiDirectoryCollectionElementEventMap>(type: K, listener: (this: HTMLUiDirectoryCollectionElement, ev: UiDirectoryCollectionCustomEvent<HTMLUiDirectoryCollectionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiDirectoryCollectionElementEventMap>(type: K, listener: (this: HTMLUiDirectoryCollectionElement, ev: UiDirectoryCollectionCustomEvent<HTMLUiDirectoryCollectionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiDirectoryCollectionElement: {
        prototype: HTMLUiDirectoryCollectionElement;
        new (): HTMLUiDirectoryCollectionElement;
    };
    interface HTMLUiDirectorySegmentElement extends Components.UiDirectorySegment, HTMLStencilElement {
    }
    var HTMLUiDirectorySegmentElement: {
        prototype: HTMLUiDirectorySegmentElement;
        new (): HTMLUiDirectorySegmentElement;
    };
    interface HTMLElementTagNameMap {
        "ui-directory-collection": HTMLUiDirectoryCollectionElement;
        "ui-directory-segment": HTMLUiDirectorySegmentElement;
    }
}
declare namespace LocalJSX {
    interface UiDirectoryCollection {
        /**
          * Horizontal alignment for scrolling into view.
          * @type {ScrollIntoViewOptions['inline']}
          * @default 'center'
         */
        "alignX"?: ScrollIntoViewOptions['inline'];
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "align-x"?: ScrollIntoViewOptions['inline'];
        /**
          * Vertical alignment for scrolling into view.
          * @type {ScrollIntoViewOptions['block']}
          * @default 'center'
         */
        "alignY"?: ScrollIntoViewOptions['block'];
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "align-y"?: ScrollIntoViewOptions['block'];
        /**
          * Event emitted when the active segment changes.
          * @type {UiDirectoryCollectionChangeEventData}
         */
        "onUiDirectoryCollectionSegmentChange"?: (event: UiDirectoryCollectionCustomEvent<UiDirectoryCollectionChangeEventData>) => void;
    }
    interface UiDirectorySegment {
        /**
          * Data to be used within the expansion panel.
          * @type {string | null}
          * @default null
         */
        "data"?: string | null;
        /**
          * A unique identifier for the segment.
          * @type {string}
         */
        "mark": string;
    }
    interface IntrinsicElements {
        "ui-directory-collection": UiDirectoryCollection;
        "ui-directory-segment": UiDirectorySegment;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ui-directory-collection": LocalJSX.UiDirectoryCollection & JSXBase.HTMLAttributes<HTMLUiDirectoryCollectionElement>;
            "ui-directory-segment": LocalJSX.UiDirectorySegment & JSXBase.HTMLAttributes<HTMLUiDirectorySegmentElement>;
        }
    }
}
